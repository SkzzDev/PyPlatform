import mysql.connector as mysqlclass Database:    instance = None    def __init__(self):        self.connection = None        self.connect()    @staticmethod    def wake_up():        if Database.instance is None:            Database.instance = Database()        return Database.instance    def connect(self, host = "localhost", user = "root", password = "", database = "pyplatform"):        if self.connection is None:            self.connection = mysql.connect(host=host, user=user, passwd=password, database=database)    def disconnect(self):        if self.connection is not None:            self.connection.close()    def select(self, sql, values = ()):        return self.query(sql, values, "select")    def update(self, sql, values = ()):        return self.query(sql, values, "update")    def delete(self, sql, values = ()):        return self.query(sql, values, "delete")    def insert(self, sql, values = ()):        return self.query(sql, values, "insert")    def query(self, sql, values = (), type = "select"):        if self.connection is not None:            data = None            try:                cursor = self.connection.cursor(dictionary=True)                cursor.execute(sql, values)                if type == "select":                    data = cursor.fetchall()                cursor.close()            except mysql.Error as error:                print("Erreur lors de la requÃªte: {}".format(error))            return data    def commit(self):        if self.connection is not None:            self.connection.commit()