import jsonfrom pyplatform import groundsclass Editor:    def __init__(self, game):        self.game = game        self.isOpened = False        self.newGround = grounds.Ground((0,0,0,0), 1)        self.groundSelectedKey = 0        self.isNewGroundActive = False        self.issetGroundSelected = False        self.groundSelectedPastMousePosition = [0, 0]    def toggleEditor(self):        self.game.player.despawn()        if self.isOpened:            self.exitEditor()        else:            self.enterEditor()    def enterEditor(self):        self.isOpened = True        self.game.player.can_spawn = False        self.game.maps.resetCurrentMap()    def exitEditor(self):        self.isOpened = False        self.game.player.can_spawn = True        self.newGround.switchGroundTypeTo(1)        self.game.maps.nextMap()    def resetNewGround(self):        self.newGround = grounds.Ground((0,0,0,0), self.newGround.type.type)    def setNewGround(self, x1, y1):        self.newGround.rect.x, self.newGround.rect.y = x1, y1    def updateNewGround(self, x2, y2):        x2, y2 = self.permutePoints(x2, y2)        self.updateHeightAndWidth(x2, y2)    def permutePoints(self, x2, y2):        if x2 < self.newGround.rect.x:            x2, self.newGround.rect.x = self.newGround.rect.x, x2        if y2 < self.newGround.rect.y:            y2, self.newGround.rect.y = self.newGround.rect.y, y2        return x2, y2    def updateHeightAndWidth(self, x2, y2):        self.newGround.rect.w = x2 - self.newGround.rect.x;        self.newGround.rect.h = y2 - self.newGround.rect.y;    def createNewGround(self, x2, y2):        self.updateNewGround(x2, y2)        if self.newGround.rect.h >= 10 and self.newGround.rect.w >= 10: # Si le bloc fait au moins 10x10            # Ajout du nouveau sol            self.game.maps.currentMap.grounds.addGroundG(self.newGround)        self.resetNewGround()    def deleteElement(self, x, y):        self.game.maps.currentMap.deleteElement(x, y)    def selectGround(self, x, y):        ground_list = self.game.maps.currentMap.grounds.ground_list        lastKey = len(ground_list) - 1        self.issetGroundSelected = False        for key, ground in enumerate(reversed(ground_list)):            if ground.rect.x <= x <= ground.rect.x + ground.rect.w:                if ground.rect.y <= y <= ground.rect.y + ground.rect.h:                    self.groundSelectedKey = lastKey - key                    self.groundSelectedPastPositions = [x, y, ground.rect.x, ground.rect.y]                    self.issetGroundSelected = True                    break    def moveGroundSelected(self, x, y):        if self.issetGroundSelected:            ground_list = self.game.maps.currentMap.grounds.ground_list            key = self.groundSelectedKey            pastpos = self.groundSelectedPastPositions            ground_list[key].rect.x = pastpos[2] + (x - pastpos[0])            ground_list[key].rect.y = pastpos[3] + (y - pastpos[1])    def unselectGround(self):        self.issetGroundSelected = False        self.groundSelectedKey = 0    def upZGroundSelected(self):        if self.issetGroundSelected:            ground_list = self.game.maps.currentMap.grounds.ground_list            lastKey = len(ground_list) - 1            key = self.groundSelectedKey            if key < lastKey:                self.game.maps.currentMap.grounds.ground_list[key], self.game.maps.currentMap.grounds.ground_list[key + 1] = self.game.maps.currentMap.grounds.ground_list[key + 1], self.game.maps.currentMap.grounds.ground_list[key]                self.groundSelectedKey += 1    def downZGroundSelected(self):        if self.issetGroundSelected:            ground_list = self.game.maps.currentMap.grounds.ground_list            lastKey = len(ground_list) - 1            key = self.groundSelectedKey            if key > 0:                self.game.maps.currentMap.grounds.ground_list[key], self.game.maps.currentMap.grounds.ground_list[key - 1] = self.game.maps.currentMap.grounds.ground_list[key - 1], self.game.maps.currentMap.grounds.ground_list[key]                self.groundSelectedKey -= 1    def exportMap(self):        currentMap = self.game.maps.currentMap        # Structure de d√©part        mapData = {"data": {"spawn": currentMap.spawn, "holes": [], "checkpoints": []}, "grounds": []}                # Trous        for hole in currentMap.holes:            mapData["data"]["holes"].append({"x": hole.rect.x, "y": hole.rect.y})        # Checkpoints        for checkpoint in currentMap.checkpoints:            mapData["data"]["checkpoints"].append({"x": checkpoint.rect.x, "y": checkpoint.rect.y})        # Sols        for ground in currentMap.grounds.ground_list:            mapData["grounds"].append({"x": ground.rect.x, "y": ground.rect.y, "h": ground.rect.h, "w": ground.rect.w, "type": ground.type.type})        # Conversion au format JSON (texte)        mapDataJSON = json.dumps(mapData)                # Exportation de la map        self.game.maps.addMap("Skzz", mapDataJSON)